openapi: 3.0.0
info:
  description: Public Microsetta RESTful API
  version: "2021.01"
  title: Public Microsetta RESTful API (OAS 3.0)
servers:
  - url: '/results-api'

paths:
  '/metadata/category/available':
    get:
      operationId: microsetta_public_api.api.metadata.categories
      tags:
        - Metadata
      summary: Get categories of metadata available
      description: Get categories of metadata available
      responses:
        '200':
          description: Successfully returned categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  '/metadata/category/values/{category}':
    get:
      operationId: microsetta_public_api.api.metadata.category_values
      tags:
        - Metadata
      summary: Get values associated with metadata category
      description: Get values associated with metadata category
      parameters:
        - in: path
          name: category
          description: Metadata category to return values of
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfuly returned category values
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: number
        '404':
            $ref: '#/components/responses/404NotFound'

  '/metadata/values':
    parameters:
      - in: query
        name: cat
        description: Metadata categories to return
        schema:
          $ref: '#/components/schemas/metadataHeaders'
    post:
      operationId: microsetta_public_api.api.metadata.get_metadata_values
      tags:
        - Metadata
      summary: Get metadata associated with given samples
      description: Get metadata associated with given samples
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sampleIdArray'
      responses:
        '200':
          description: Successfully returned metadata values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metadata"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/metadata/sample_ids':
    parameters:
      - in: query
        name: taxonomy
        description: Filter IDs to those present in the table associated with `taxonomy`
        schema:
          type: string
          example: 'genus-level-taxonomy'
      - in: query
        name: alpha_metric
        description: Filter IDs to those present in the data for `alpha_metric`
        schema:
          $ref: '#/components/schemas/alphaMetric'
    get:
      operationId: microsetta_public_api.api.metadata.filter_sample_ids
      tags:
        - Metadata
      summary: Get samples associated with query
      description: Get samples associated with query
      parameters:
        - in: query
          name: age_cat
          schema:
            type: string
            example: '30s'
        - in: query
          name: bmi_cat
          schema:
            type: string
            example: 'Normal'
      responses:
        '200':
          description: Successfully returned sample ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sampleIdList"
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.metadata.filter_sample_ids_query_builder
      tags:
        - Metadata
      summary: Query samples associated with query
      description: Query samples associated with query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataQuery'
      responses:
        '200':
          description: Successfully returned sample ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sampleIdList"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/metadata/category/available':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.metadata.categories_alt
      tags:
        - Metadata
      summary: Get categories of metadata available
      description: Get categories of metadata available
      responses:
        '200':
          description: Successfully returned categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  '/dataset/{dataset}/metadata/category/values/{category}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.metadata.category_values_alt
      tags:
        - Metadata
      summary: Get values associated with metadata category
      description: Get values associated with metadata category
      parameters:
        - in: path
          name: category
          description: Metadata category to return values of
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfuly returned category values
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: number
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/metadata/values':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - in: query
        name: cat
        description: Metadata categories to return
        schema:
          $ref: '#/components/schemas/metadataHeaders'
    post:
      operationId: microsetta_public_api.api.metadata.get_metadata_values_alt
      tags:
        - Metadata
      summary: Get metadata associated with given samples
      description: Get metadata associated with given samples
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sampleIdArray'
      responses:
        '200':
          description: Successfully returned metadata values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metadata"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/metadata/sample_ids':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - in: query
        name: taxonomy
        description: Filter IDs to those present in the table associated with `taxonomy`
        schema:
          type: string
          example: 'genus-level-taxonomy'
      - in: query
        name: alpha_metric
        description: Filter IDs to those present in the data for `alpha_metric`
        schema:
          $ref: '#/components/schemas/alphaMetric'
    get:
      operationId: microsetta_public_api.api.metadata.filter_sample_ids_alt
      tags:
        - Metadata
      summary: Get samples associated with query
      description: Get samples associated with query
      parameters:
        - in: query
          name: age_cat
          schema:
            type: string
            example: '30s'
        - in: query
          name: bmi_cat
          schema:
            type: string
            example: 'Normal'
      responses:
        '200':
          description: Successfully returned sample ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sampleIdList"
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.metadata.filter_sample_ids_query_builder_alt
      tags:
        - Metadata
      summary: Query samples associated with query
      description: Query samples associated with query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataQuery'
      responses:
        '200':
          description: Successfully returned sample ids
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sampleIdList"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/plotting/diversity/alpha/{alpha_metric}/percentiles-plot':
    parameters:
      - $ref: '#/components/parameters/alphaMetric'
      - $ref: '#/components/parameters/percentiles'
      - $ref: '#/components/parameters/sampleIdQueryOpt'
    get:
      operationId: microsetta_public_api.api.plotting.plot_alpha_filtered
      tags:
        - Plotting
        - Alpha Diversity
      summary: Get a Vega schema for alpha diversity CDF matching criteria
      description: Get a Vega schema for alpha diversity cdf matching criteria
      parameters:
        - in: query
          name: age_cat
          schema:
            type: string
            example: '30s'
        - in: query
          name: bmi_cat
          schema:
            type: string
            example: 'Normal'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    post:
      operationId: microsetta_public_api.api.plotting.plot_alpha_filtered_json_query
      tags:
        - Plotting
        - Alpha Diversity
      summary: Get a Vega schema for alpha diversity cdf matching criteria
      description: Get a Vega schema for alpha diversity cdf matching criteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataQuery'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/diversity/alpha/metrics/available':
    get:
      operationId: microsetta_public_api.api.diversity.alpha.available_metrics_alpha
      tags:
        - Alpha Diversity
      summary: Get available alpha diversity metrics
      description: Get available alpha diversity metrics
      responses:
        '200':
          description: Successfully returned alpha diversity metrics
          content:
            application/json:
              schema:
                type: object
                required:
                  - alpha_metrics
                properties:
                  alpha_metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/alphaMetric'
                    example:
                      - "faith_pd"
                      - "observed_otus"
                      - "chao1"

  '/diversity/alpha/exists/{alpha_metric}':
    parameters:
      - $ref: '#/components/parameters/alphaMetric'
    summary: Determine whether the given sample is contained in the alpha resource
    description: Determine whether the given sample is contained in the alpha resource
    get:
      operationId: microsetta_public_api.api.diversity.alpha.exists_single
      tags:
        - Alpha Diversity
      parameters:
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: Indicates whether the sample is in the alpha resource
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.diversity.alpha.exists_group
      tags:
        - Alpha Diversity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdArray"
      responses:
        '200':
          description: Indicates whether each sample is in the alpha resource, in the same order as the input list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/diversity/alpha/single/{alpha_metric}/{sample_id}':
    get:
      operationId: microsetta_public_api.api.diversity.alpha.get_alpha
      tags:
        - Alpha Diversity
      summary: Get single sample alpha diversity
      description: Get single sample alpha diversity
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/alphaMetric'
      responses:
        '200':
          description: Successfully return alpha diversity information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sample_id:
                    $ref: '#/components/schemas/sampleId'
                  alpha_metric:
                    $ref: '#/components/schemas/alphaMetric'
                  data:
                    type: number
                    example: 7.24
                    description: Alpha diversity value for sample ID with metric
        '404':
          $ref: '#/components/responses/404NotFound'

  '/diversity/alpha/group/{alpha_metric}':
    post:
      operationId: microsetta_public_api.api.diversity.alpha.alpha_group
      tags:
        - Alpha Diversity
      summary: Query alpha diversity for a group of samples
      description: >
        Query alpha diversity for a group of samples.
        If `condition="AND"`, a group summary will be provided for those ID's matching both
        `sample_ids` and `metadata_query`.
        If `condition="OR"`, the summary will be provided for ID's matching either `sample_ids` or `metadata_query`.
        '`condition` must be specified if both '`sample_ids` and `metadata_query` are specified.'
      parameters:
        - $ref: '#/components/parameters/alphaMetric'
        - in: query
          name: summary_statistics
          schema:
            type: boolean
            default: true
          description: >
            Indicates whether summary statistics should be returned.
        - in: query
          name: return_raw
          schema:
            type: boolean
            default: false
          description: >
            Indicates whether raw alpha diversity values should be returned.
        - in: query
          name: percentiles
          explode: false
          schema:
            $ref: '#/components/schemas/percentiles'
          required: false
          description: >
            Percentiles that should be returned. If not specified, then
            `10,20,30,40,50,60,70,80,90` will be used.
            Ignored if `summary_statistics=false`.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    sample_ids:
                      $ref: "#/components/schemas/sampleIdArray"
                    metadata_query:
                      $ref: "#/components/schemas/metadataQuery"
                    condition:
                      $ref: "#/components/schemas/ANDOR"
              not:
                type: object
                additionalProperties: false
                required:
                  - sample_ids
                  - metadata_query
                properties:
                  sample_ids:
                    $ref: "#/components/schemas/sampleIdArray"
                  metadata_query:
                    $ref: "#/components/schemas/metadataQuery"
      responses:
        '200':
          description: Successfuly return alpha diversity information
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - alpha_metric
                    properties:
                      alpha_metric:
                        $ref: '#/components/schemas/alphaMetric'
                  - anyOf:
                    - type: object
                      required:
                        - alpha_diversity
                      properties:
                        alpha_diversity:
                          type: object
                          additionalProperties:
                            type: number
                            example: 7.24
                            description: Alpha diversity value of the metric for a given sample ID.
                          example:
                            sample1: 0.1,
                            sample2: 9.01,
                            sample3: 7.24,
                          description: Dictionary of sample ID - alpha diversity value pairs
                    - type: object
                      required:
                        - group_summary
                      properties:
                        group_summary:
                          type: object
                          required:
                            - mean
                            - median
                            - std
                            - group_size
                            - percentile
                            - percentile_values
                          properties:
                            mean:
                              type: number
                              example: 8.47
                            median:
                              type: number
                              example: 8.25
                            std:
                              type: number
                              example: 0.54
                            group_size:
                              type: integer
                              example: 24
                            percentile:
                              type: array
                              items:
                                type: number
                                minimum: 0
                                maximum: 100
                              example:
                                - 0
                                - 24
                                - 49
                                - 74
                                - 99
                            percentile_values:
                              type: array
                              items:
                                type: number
                              example:
                                - 7.15
                                - 7.24
                                - 8.25
                                - 9.01
                                - 9.04
        '404':
          $ref: '#/components/responses/404NotFound'
        '400':
          description: >
            Either `summary_statistics`, `return_raw`, or both are required to be true.

  /diversity/beta/{beta_metric}/pcoa/{named_sample_set}/contains:
    get:
      operationId: microsetta_public_api.api.diversity.beta.pcoa_contains
      tags:
        - Beta Diversity
      summary: Get whether the given `sample_id` is contained in the `named_sample_set`
      description: Get whether the given `sample_id` is contained in the `named_sample_set`
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: a `boolean`, which indicates if `sample_id` is contained in `named_sample_set`
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/plotting/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/vega':
    get:
      operationId: microsetta_public_api.api.plotting.plot_beta
      tags:
        - Plotting
        - Beta Diversity
      summary: Get a Vega schema for PCOA plot
      description: Get a Vega schema for PCOA plot
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxonomy/available':
    get:
      operationId: microsetta_public_api.api.taxonomy.resources
      tags:
        - Taxonomy
      summary: Get list of available taxonomy resources
      description: Get list of available taxonomy resources
      responses:
        '200':
          description: Successfully returned taxonomy resources
          content:
            application/json:
              schema:
                type: object
                required:
                  - resources
                properties:
                  resources:
                    type: array
                    items:
                      type: string
                      example: "greengenes"
                    example:
                      - "greengenes"
                      - "silva"

  '/taxonomy/exists/{resource}':
    parameters:
      - $ref: '#/components/parameters/taxonomyResource'
    summary: Determine whether the given sample is contained in the taxonomy resource
    description: Determine whether the given sample is contained in the taxonomy resource
    get:
      operationId: microsetta_public_api.api.taxonomy.exists_single
      tags:
        - Taxonomy
      parameters:
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: Indicates whether the sample is in the taxonomy resource
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.taxonomy.exists_group
      tags:
        - Taxonomy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdArray"
      responses:
        '200':
          description: Indicates whether each sample is in the taxonomy resource. Order of the output array corresponds to the order of the input array.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxonomy/group/{resource}':
    post:
      operationId: microsetta_public_api.api.taxonomy.summarize_group
      tags:
        - Taxonomy
      summary: Get taxonomy information for a group of samples
      description: Get taxonomy information for a group of samples
      parameters:
        - $ref: '#/components/parameters/taxonomyResource'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdList"
      responses:
        '200':
          description: Successfuly return taxonomy information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyFeatures'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxonomy/single/{resource}/{sample_id}':
    get:
      operationId: microsetta_public_api.api.taxonomy.single_sample
      tags:
        - Taxonomy
      summary: Get taxonomy information for a sample
      description: Get taxonomy information for a sample
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/taxonomyResource'
      responses:
        '200':
          description: Successfuly return taxonomy information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyFeatures'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxonomy/present/group/{resource}':
    post:
      operationId: microsetta_public_api.api.taxonomy.group_taxa_present
      tags:
        - Taxonomy
      summary: Get a DataTable of taxa, broken down by rank, for a list of samples
      description: Get a DataTable of taxa, broken down by rank, for a list of samples
      parameters:
        - $ref: '#/components/parameters/taxonomyResource'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdList"
      responses:
        '200':
          description: Successfully return taxonomy table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleDataTable'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxonomy/present/single/{resource}/{sample_id}':
    get:
      operationId: microsetta_public_api.api.taxonomy.single_sample_taxa_present
      tags:
        - Taxonomy
      summary: Get a DataTable of taxa, broken down by rank, for a given sample
      description: Get a DataTable of taxa, broken down by rank, for a given sample
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/taxonomyResource'
      responses:
        '200':
          description: Successfully return taxonomy table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleDataTable'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/plotting/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/emperor':
    get:
      operationId: microsetta_public_api.api.emperor.plot_pcoa
      tags:
        - Plotting
        - Beta Diversity
        - Emperor
      summary: Get an Emperor compatible PCoA schema
      description: Get an Emperor compatible PCoA schema
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/metadataCategories'
        - $ref: '#/components/parameters/fillna'
      responses:
        '200':
          description: Successfully return Emperor Schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emperorPCoA'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/available/dataset':
    get:
      operationId: microsetta_public_api.api.datasets.available
      summary: Get a list of available datasets
      description: Get a list of available datasets
      responses:
        '200':
          description: Successfully return available datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasetDetail'

  '/dataset/{dataset}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.datasets.dataset_detail
      summary: Get detail on a particular dataset
      description: Get detail on a particular dataset
      responses:
        '200':
          description: Successfully returned dataset details
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/datasetDetail'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/sample/dataset/{dataset}/contains/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/sampleIdPath'
    get:
      operationId: microsetta_public_api.api.datasets.dataset_sample_exists
      summary: Check if a sample is present in a dataset
      description: Check if a sample is present in a dataset
      responses:
        '200':
          description: True if the sample exists, False otherwise
          content:
            application/json:
              schema:
                type: boolean

  '/sample/list/dataset/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/sampleIdPath'
    get:
      operationId: microsetta_public_api.api.datasets.datasets_for_sample
      summary: Find all datasets that contain a given sample ID.
      description: Find all datasets that contain a given sample ID.
      responses:
        '200':
          description: Datasets that contain the sample ID.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/namedDataset'

  '/dataset/{dataset}/plotting/diversity/alpha/{alpha_metric}/percentiles-plot':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/alphaMetric'
      - $ref: '#/components/parameters/percentiles'
      - $ref: '#/components/parameters/sampleIdQueryOpt'
    get:
      operationId: microsetta_public_api.api.plotting.plot_alpha_filtered_alt
      tags:
        - Plotting
        - Alpha Diversity
      summary: Get a Vega schema for alpha diversity CDF matching criteria
      description: Get a Vega schema for alpha diversity cdf matching criteria
      parameters:
        - in: query
          name: age_cat
          schema:
            type: string
            example: '30s'
        - in: query
          name: bmi_cat
          schema:
            type: string
            example: 'Normal'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    post:
      operationId: microsetta_public_api.api.plotting.plot_alpha_filtered_json_query_alt
      tags:
        - Plotting
        - Alpha Diversity
      summary: Get a Vega schema for alpha diversity cdf matching criteria
      description: Get a Vega schema for alpha diversity cdf matching criteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataQuery'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/dataset/{dataset}/diversity/alpha/metrics/available':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.diversity.alpha.available_metrics_alpha_alt
      tags:
        - Alpha Diversity
      summary: Get available alpha diversity metrics
      description: Get available alpha diversity metrics
      responses:
        '200':
          description: Successfully returned alpha diversity metrics
          content:
            application/json:
              schema:
                type: object
                required:
                  - alpha_metrics
                properties:
                  alpha_metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/alphaMetric'
                    example:
                      - "faith_pd"
                      - "observed_otus"
                      - "chao1"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/diversity/alpha/exists/{alpha_metric}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/alphaMetric'
    summary: Determine whether the given sample is contained in the alpha resource
    description: Determine whether the given sample is contained in the alpha resource
    get:
      operationId: microsetta_public_api.api.diversity.alpha.exists_single_alt
      tags:
        - Alpha Diversity
      parameters:
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: Indicates whether the sample is in the alpha resource
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.diversity.alpha.exists_group_alt
      tags:
        - Alpha Diversity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdArray"
      responses:
        '200':
          description: Indicates whether each sample is in the alpha resource, in the same order as the input list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/diversity/alpha/single/{alpha_metric}/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.diversity.alpha.get_alpha_alt
      tags:
        - Alpha Diversity
      summary: Get single sample alpha diversity
      description: Get single sample alpha diversity
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/alphaMetric'
      responses:
        '200':
          description: Successfully return alpha diversity information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sample_id:
                    $ref: '#/components/schemas/sampleId'
                  alpha_metric:
                    $ref: '#/components/schemas/alphaMetric'
                  data:
                    type: number
                    example: 7.24
                    description: Alpha diversity value for sample ID with metric
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/diversity/alpha/group/{alpha_metric}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    post:
      operationId: microsetta_public_api.api.diversity.alpha.alpha_group_alt
      tags:
        - Alpha Diversity
      summary: Query alpha diversity for a group of samples
      description: >
        Query alpha diversity for a group of samples.
        If `condition="AND"`, a group summary will be provided for those ID's matching both
        `sample_ids` and `metadata_query`.
        If `condition="OR"`, the summary will be provided for ID's matching either `sample_ids` or `metadata_query`.
        '`condition` must be specified if both '`sample_ids` and `metadata_query` are specified.'
      parameters:
        - $ref: '#/components/parameters/alphaMetric'
        - in: query
          name: summary_statistics
          schema:
            type: boolean
            default: true
          description: >
            Indicates whether summary statistics should be returned.
        - in: query
          name: return_raw
          schema:
            type: boolean
            default: false
          description: >
            Indicates whether raw alpha diversity values should be returned.
        - in: query
          name: percentiles
          explode: false
          schema:
            $ref: '#/components/schemas/percentiles'
          required: false
          description: >
            Percentiles that should be returned. If not specified, then
            `10,20,30,40,50,60,70,80,90` will be used.
            Ignored if `summary_statistics=false`.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    sample_ids:
                      $ref: "#/components/schemas/sampleIdArray"
                    metadata_query:
                      $ref: "#/components/schemas/metadataQuery"
                    condition:
                      $ref: "#/components/schemas/ANDOR"
              not:
                type: object
                additionalProperties: false
                required:
                  - sample_ids
                  - metadata_query
                properties:
                  sample_ids:
                    $ref: "#/components/schemas/sampleIdArray"
                  metadata_query:
                    $ref: "#/components/schemas/metadataQuery"
      responses:
        '200':
          description: Successfuly return alpha diversity information
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - alpha_metric
                    properties:
                      alpha_metric:
                        $ref: '#/components/schemas/alphaMetric'
                  - anyOf:
                      - type: object
                        required:
                          - alpha_diversity
                        properties:
                          alpha_diversity:
                            type: object
                            additionalProperties:
                              type: number
                              example: 7.24
                              description: Alpha diversity value of the metric for a given sample ID.
                            example:
                              sample1: 0.1,
                              sample2: 9.01,
                              sample3: 7.24,
                            description: Dictionary of sample ID - alpha diversity value pairs
                      - type: object
                        required:
                          - group_summary
                        properties:
                          group_summary:
                            type: object
                            required:
                              - mean
                              - median
                              - std
                              - group_size
                              - percentile
                              - percentile_values
                            properties:
                              mean:
                                type: number
                                example: 8.47
                              median:
                                type: number
                                example: 8.25
                              std:
                                type: number
                                example: 0.54
                              group_size:
                                type: integer
                                example: 24
                              percentile:
                                type: array
                                items:
                                  type: number
                                  minimum: 0
                                  maximum: 100
                                example:
                                  - 0
                                  - 24
                                  - 49
                                  - 74
                                  - 99
                              percentile_values:
                                type: array
                                items:
                                  type: number
                                example:
                                  - 7.15
                                  - 7.24
                                  - 8.25
                                  - 9.01
                                  - 9.04
        '404':
          $ref: '#/components/responses/404NotFound'
        '400':
          description: >
            Either `summary_statistics`, `return_raw`, or both are required to be true.

  '/dataset/{dataset}/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/contains':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.diversity.beta.pcoa_contains_alt
      tags:
        - Beta Diversity
      summary: Get whether the given `sample_id` is contained in the `named_sample_set`
      description: Get whether the given `sample_id` is contained in the `named_sample_set`
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: a `boolean`, which indicates if `sample_id` is contained in `named_sample_set`
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/plotting/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/vega':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.plotting.plot_beta_alt
      tags:
        - Plotting
        - Beta Diversity
      summary: Get a Vega schema for PCOA plot
      description: Get a Vega schema for PCOA plot
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          $ref: '#/components/responses/200VegaSchema'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/plotting/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/png':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.plotting.plot_beta_alt_mpl
      tags:
        - Plotting
        - Beta Diversity
      summary: Get a rasterized PNG
      description: Get a rasterized PNG
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/sampleIdQuery'
        - $ref: '#/components/parameters/categoryQuery'
      responses:
        '200':
          $ref: '#/components/responses/200PNGSchema'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/available':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.taxonomy.resources_alt
      tags:
        - Taxonomy
      summary: Get list of available taxonomy resources
      description: Get list of available taxonomy resources
      responses:
        '200':
          description: Successfully returned taxonomy resources
          content:
            application/json:
              schema:
                type: object
                required:
                  - resources
                properties:
                  resources:
                    type: array
                    items:
                      type: string
                      example: "greengenes"
                    example:
                      - "greengenes"
                      - "silva"
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/exists/{resource}':
    parameters:
      - $ref: '#/components/parameters/taxonomyResource'
      - $ref: '#/components/parameters/namedDataset'
    summary: Determine whether the given sample is contained in the taxonomy resource
    description: Determine whether the given sample is contained in the taxonomy resource
    get:
      operationId: microsetta_public_api.api.taxonomy.exists_single_alt
      tags:
        - Taxonomy
      parameters:
        - $ref: '#/components/parameters/sampleIdQuery'
      responses:
        '200':
          description: Indicates whether the sample is in the taxonomy resource
          content:
            application/json:
              schema:
                type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_public_api.api.taxonomy.exists_group_alt
      tags:
        - Taxonomy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdArray"
      responses:
        '200':
          description: Indicates whether each sample is in the taxonomy resource. Order of the output array corresponds to the order of the input array.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/empress/{resource}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/taxonomyResource'
      - $ref: '#/components/parameters/sampleIdQueryOpt'
    get:
      operationId: microsetta_public_api.api.taxonomy.get_empress
      tags:
        - Taxonomy
        - Plotting
      summary: Get the empress object corresponding to the taxonomy for a given dataset.
      description: Get the empress object corresponding to the taxonomy for a given dataset.
      responses:
        '200':
          description: An empress object.
          content:
            application/json:
              schema:
                type: object
                description: |
                  An empress object that can be used to initailize an empress plot.
                  Find more info [here](https://github.com/biocore/empress/blob/v1.0.1/empress/core.py).
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/group/{resource}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    post:
      operationId: microsetta_public_api.api.taxonomy.summarize_group_alt
      tags:
        - Taxonomy
      summary: Get taxonomy information for a group of samples
      description: Get taxonomy information for a group of samples
      parameters:
        - $ref: '#/components/parameters/taxonomyResource'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdList"
      responses:
        '200':
          description: Successfuly return taxonomy information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyFeatures'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/group/{resource}/counts':
    post:
      operationId: microsetta_public_api.api.taxonomy.group_counts
      tags:
        - Taxonomy
      summary: Get counts of taxa at a particular level for a group of samples
      description: Get counts of taxa at a particular level for a group of samples
      parameters:
        - $ref: '#/components/parameters/namedDataset'
        - $ref: '#/components/parameters/taxonomyResource'
        - $ref: '#/components/parameters/taxonomyLevelQuery'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdList"
      responses:
        '200':
          description: Successfuly return taxa counts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxaCounts'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/single/{resource}/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.taxonomy.single_sample_alt
      tags:
        - Taxonomy
      summary: Get taxonomy information for a sample
      description: Get taxonomy information for a sample
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/taxonomyResource'
      responses:
        '200':
          description: Successfully return taxonomy information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyFeatures'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/single/{resource}/{sample_id}/counts':
    get:
      operationId: microsetta_public_api.api.taxonomy.single_counts
      tags:
        - Taxonomy
      summary: Get counts of taxa at a particular level for a sample
      description: Get counts of taxa at a particular level for a sample
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/namedDataset'
        - $ref: '#/components/parameters/taxonomyResource'
        - $ref: '#/components/parameters/taxonomyLevelQuery'
      responses:
        '200':
          description: Successfuly return taxa counts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxaCounts'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/ranks/{resource}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/taxonomyResource'
      - $ref: '#/components/parameters/ranksSampleSize'
    get:
      operationId: microsetta_public_api.api.taxonomy.ranks_sample
      tags:
        - Taxonomy
      summary: Obtain a random sample of the rank order of observed taxa
      description: |
        Obtain a random sample of the rank order of observed taxa in the dataset.
        A high value for a rank means that taxon was observed to have a high relative
        abundance in a particular sample. A low value means that taxon was observed
        to have a low relative abundance. The data being sampled are a reduced set 
        of the overall taxa in the dataset, such that low prevalence taxa are 
        removed prior to ranking. In addition, ranks are only computed over the 
        genus level.
      responses:
        '200':
          description: Successfully obtained a sampling of ranks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyRanks'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/ranks/{resource}/sample/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
      - $ref: '#/components/parameters/taxonomyResource'
      - $ref: '#/components/parameters/sampleIdPath'
    get:
      operationId: microsetta_public_api.api.taxonomy.ranks_specific
      tags:
        - Taxonomy
      summary: Obtain the rank order of observed taxa in a specific sample
      description: |
        Obtain the rank order of observed taxa in a specific sample. A high
        value for a rank means that taxon was observed to have a high relative
        abundance in a particular sample. A low value means that taxon was
        observed to have a low relative abundance. The ranks are a
        reduced set of the overall taxa in the dataset, such that low
        prevalence taxa are removed prior to ranking. In addition, ranks are
        only computed over the genus level.
      responses:
        '200':
          description: Successfully obtained ranks for a specific sample
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taxonomyRanks'
        '404':
          $ref: '#/components/responses/404NotFound'
  
  '/dataset/{dataset}/taxonomy/present/group/{resource}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    post:
      operationId: microsetta_public_api.api.taxonomy.group_taxa_present_alt
      tags:
        - Taxonomy
      summary: Get a DataTable of taxa, broken down by rank, for a list of samples
      description: Get a DataTable of taxa, broken down by rank, for a list of samples
      parameters:
        - $ref: '#/components/parameters/taxonomyResource'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sampleIdList"
      responses:
        '200':
          description: Successfully return taxonomy table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleDataTable'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/taxonomy/present/single/{resource}/{sample_id}':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.taxonomy.single_sample_taxa_present_alt
      tags:
        - Taxonomy
      summary: Get a DataTable of taxa, broken down by rank, for a given sample
      description: Get a DataTable of taxa, broken down by rank, for a given sample
      parameters:
        - $ref: '#/components/parameters/sampleIdPath'
        - $ref: '#/components/parameters/taxonomyResource'
      responses:
        '200':
          description: Successfully return taxonomy table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleDataTable'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/plotting/diversity/beta/{beta_metric}/pcoa/{named_sample_set}/emperor':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.emperor.plot_pcoa_alt
      tags:
        - Plotting
        - Beta Diversity
        - Emperor
      summary: Get an Emperor compatible PCoA schema
      description: Get an Emperor compatible PCoA schema
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/namedSampleSet'
        - $ref: '#/components/parameters/metadataCategories'
        - $ref: '#/components/parameters/fillna'
      responses:
        '200':
          description: Successfully return Emperor Schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emperorPCoA'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/dataset/{dataset}/diversity/beta/{beta_metric}/nearest':
    parameters:
      - $ref: '#/components/parameters/namedDataset'
    get:
      operationId: microsetta_public_api.api.diversity.beta.k_nearest
      tags:
        - Plotting
        - Beta Diversity
      summary: Get the k nearest sample ID's to a given sample ID
      description: Get the k nearest sample ID's to a given sample ID
      parameters:
        - $ref: '#/components/parameters/betaMetric'
        - $ref: '#/components/parameters/sampleIdQuery'
        - $ref: '#/components/parameters/k'
      responses:
        '200':
          description: Successfully return nearest sample IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleIdArray'
        '404':
          $ref: '#/components/responses/404NotFound'

components:
  parameters:
    alphaMetric:
      name: alpha_metric
      in: path
      description: An alpha diversity metric
      schema:
        $ref: '#/components/schemas/alphaMetric'
      required: true
    betaMetric:
      name: beta_metric
      in: path
      description: A beta diversity metric
      schema:
        $ref: '#/components/schemas/betaMetric'
      required: true
    fillna:
      name: fillna
      in: query
      description: Value to populate NaN values with
      schema:
        type: string
    k:
      name: k
      in: query
      description: Number to select
      schema:
        type: integer
        minimum: 1
        default: 1
    metadataCategories:
      name: metadata_categories
      in: query
      description: An array of metadata categories
      schema:
        $ref: '#/components/schemas/metadataHeaders'
      required: true
    namedDataset:
      name: dataset
      in: path
      description: A named dataset
      schema:
        $ref: '#/components/schemas/namedDataset'
      required: true
    namedSampleSet:
      name: named_sample_set
      in: path
      description: A named collection of samples
      schema:
        $ref: '#/components/schemas/namedSampleSet'
      required: true
    sampleIdPath:
      name: sample_id
      in: path
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/sampleId'
      required: true
    categoryQuery:
      name: category
      in: query
      schema:
        type: string
        example: 'age_cat'
    sampleIdQuery:
      name: sample_id
      in: query
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/sampleId'
      required: true
    sampleIdQueryOpt:
      name: sample_id
      in: query
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/sampleId'
      required: false
    taxonomyLevelQuery:
      name: level
      in: query
      description: The taxonomic level to count over
      required: true
      schema:
        $ref: '#/components/schemas/taxonomyLevel'
    taxonomyResource:
      name: resource
      in: path
      description: An identifier for a taxonomy and feature table resource
      schema:
        type: string
        example: "greengenes"
      required: true
    percentiles:
      name: percentiles
      in: query
      explode: false
      schema:
        $ref: '#/components/schemas/percentiles'
      required: false
    ranksSampleSize:
      name: sample_size
      in: query
      description: The size of the random sample of ranks to obtain
      schema:
        type: integer
        example: 30000
      required: true

  schemas:
    alphaMetric:
      type: string
      example: "faith_pd"
    anyValue:
      nullable: true
    ANDOR:
      type: string
      enum:
        - "AND"
        - "OR"
    betaMetric:
      type: string
      example: "unifrac"
    coordinates:
      description: >
        2D array of coordinates
      type: array
      items:
        type: array
        items:
          type: number
      example:
        - [-0.1776, 0.6011, -0.2033, -0.3368]
        - [0.2561, 0.4013, -0.32037, 0.09316]
    datasetDetail:
      type: object
      properties:
        name:
          type: object
          properties:
            title:
              type: string
              example: "Name intended for human consumption"
            qiita-study-ids:
              type: array
              items:
                type: number
            datatype:
              type: string
              example: "16S"
              enum:
                - "16S"
                - "Metagenomics"
                - "18S"
                - "Metabolomics"
                - "Metatranscriptomics"
    emperorDecomposition:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/coordinates'
        percents_explained:
          $ref: '#/components/schemas/percentsExplained'
        sample_ids:
          $ref: '#/components/schemas/sampleIdArray'
    emperorPCoA:
      type: object
      description: >
        # TODO
      properties:
        decomposition:
          $ref: '#/components/schemas/emperorDecomposition'
        metadata:
          $ref: '#/components/schemas/metadata'
        metadata_headers:
          $ref: '#/components/schemas/metadataHeaders'
    metadata:
      description: >
        2d array of metadata values
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/metadataValue'
        example:
          - ["fecal", 0.7, 9, "30s", "Normal"]
          - ["sebum", 20.4, null, "40s", "Overweight"]
    metadataHeaders:
      description: >
        List of metadata column names
      type: array
      items:
        type: string
      example:
        - "body-habitat"
        - "latitude"
        - "days_post_surgery"
        - "age_cat"
        - "bmi_cat"
    metadataQuery:
      # TODO try to make this a little more informative (challenging due to recursive definition)
      type: object
      additionalProperties: true
      description: >
        A jQuery [QueryBuilder](https://querybuilder.js.org/)-formatted query.
      example:
        {
          "condition": "AND",
          "rules": [
          {
            "id": "age_years",
            "field": "age_years",
            "type": "double",
            "input": "number",
            "operator": "less",
            "value": 10.25
          },
          {
            "condition": "OR",
            "rules": [
            {
              "id": "bmi_cat",
              "field": "bmi_cat",
              "type": "integer",
              "input": "select",
              "operator": "equal",
              "value": 2
            },
            {
              "id": "bmi_cat",
              "field": "bmi_cat",
              "type": "integer",
              "input": "select",
              "operator": "equal",
              "value": 1
            }
            ]
          }
          ],
          "valid": true
        }
    metadataValue:
      $ref: '#/components/schemas/anyValue'
    namedDataset:
      type: string
      example: '16S'
    namedSampleSet:
      type: string
      example: 'body-site'
    percentiles:
      type: array
      items:
        type: number
        minimum: 0
        maximum: 100
        nullable: true
      default: null
      nullable: true
    percentsExplained:
      description: >
        Percent explained for axis labels
      type: array
      items:
        type: number
        minimum: 0
        maximum: 100
      example:
        - 63.21
        - 23.25
        - 8.55
        - 3.14
    relativeAbundance:
      type: number
      minimum: 0
      maximum: 1
    taxonomyLevel:
      type: string
      enum:
        - Kingdom
        - Phylum
        - Class
        - Order
        - Family
        - Genus
        - Species
    sampleId:
      type: string
      example: "sample_15"
    sampleIdArray:
      description: >
        List of sample identifiers
      type: array
      items:
        $ref: '#/components/schemas/sampleId'
      example:
        - 'sample-1'
        - 'sample-715'
    sampleIdList:
      type: object
      required:
        - sample_ids
      additionalProperties: false
      properties:
        sample_ids:
          type: array
          items:
            $ref: '#/components/schemas/sampleId'
          example:
            - "sample1"
            - "sample2"
            - "sample3"
    sampleDataTable:
      type: object
      required:
        - data
        - columns
      properties:
        data:
          type: array
          items:
            type: object
            required:
              - sampleId
            properties:
              sampleId:
                $ref: '#/components/schemas/sampleId'
              relativeAbundance:
                $ref: '#/components/schemas/relativeAbundance'
            example:
              - {
                  "sampleId": "sample1",
                  "Kingdom": "Bacteria",
                  "Genus": "Bacteroides",
                  "relativeAbundance": 0.2
                }
              - {
                  "sampleId": "sample1",
                  "Kingdom": "Bacteria",
                  "Genus": "Clostridium",
                  "relativeAbundance": 0.8
                }
              - {
                  "sampleId": "sample2",
                  "Kingdom": "Bacteria",
                  "Genus": "Bacteroides",
                  "relativeAbundance": 0.72
                }
              - {
                  "sampleId": "sample2",
                  "Kingdom": "Bacteria",
                  "Genus": null,
                  "relativeAbundance": 0.28
                }
              - {
                  "sampleId": "sample3",
                  "Kingdom": "Bacteria",
                  "Genus": "Clostridium",
                  "relativeAbundance": 1.0
                }
        columns:
          type: array
          items:
            type: object
            required:
              - data
            properties:
              data:
                type: string
                example:
                  - "sampleId"
                  - "Kingdom"
                  - "Genus"
                  - "relativeAbundance"
    taxaCounts:
      # leaving the schema undefined as we're returning
      # {taxonomic-level: count}, and oneOf acts funny
      type:
        object

    taxonomyFeatures:
      type: object
      required:
        - taxonomy
        - features
        - feature_values
      properties:
        taxonomy:
          type: string
          example: "(((((feature-2)e)d,feature-1)c)b)a;"
        features:
          type: array
          items:
            type: string
          example:
            - "feature-1"
            - "feature-2"
        feature_values:
          type: array
          items:
            type: number
          example:
            - 0.75
            - 0.25
        feature_variances:
          type: array
          items:
            type: number
          example:
            - 0.05
            - 0.11

    taxonomyRanks:
      type: object
      required:
        - Taxon
        - Rank
        - Taxa-order
      properties:
        Taxon:
          type: array
          items:
            type: string
          example:
            - "Bacteroides"
            - "Prevotella"
            - "Prevotella"
            - "Ruminococcus"
        Rank:
          type: array
          items:
            type: number
          example:
            - 15
            - 12
            - 12
            - 11
        Taxa-order:
          type: array
          items:
            type: string
          example:
            - "Bacteroides"
            - "Prevotella"
            - "Ruminococcus"

  responses:
    200PNGSchema:
      description: Successfully returned PNG
      content:
        image/png:
          schema:
            type: string
            format: binary

    200VegaSchema:
      description: Successfully returned Vega JSON
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
    422UnprocessableEntity:
      description: >
        The request was well-formed but was unable to be followed.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
